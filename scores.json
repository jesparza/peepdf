/*
Individual Indicator Scores (x/10)
*/

{

    // Vulnerabilities
    ".rawValue": 10,
    "/JBIG2Decode": 10,
    "keep.previous": 10,
    "BMP/RLE heap corruption": 10,
    "Collab.collectEmailInfo": 10,
    "CoolType.SING.uniqueName": 10,
    "spell.customDictionaryOpen": 10,
    "keep.previous": 10,
    "mailto": 10,
    "app.removeToolButton": 10,
    "doc.printSeps": 10,
    "getAnnots": 10,
    "getIcon": 10,
    "media.newPlayer": 10,
    "util.printf": 10,
    "/U3D": 10,
    "/PRC": 10,

    // Boolean return
    "Garbage bytes between objects": 3,
    "Header too large": 5,
    "Illegal entries in Xref": 6,
    "Large Gap before Header": 5,
    "Large gap after last %EOF": 5,
    "Garbage Header before PDF Header": 8,
    "Garbage Bytes after last %EOF": 7,
    "Xref Table broken": 5,         // increase after offsets error fix
    "Binary Header too large": 5,
    "badHeader": 3,
    "missingEOF": 3,
    "missingXref": 3,
    "missingCatalog": 3,
    "File encrypted with default password": 5,

    // List return
    // (min_score, max_score)
    // max_score checked against min_score+len(x)
    "/AA": [5, 7],
    "/AcroForm": [5, 7],
    "/EmbeddedFile": [5, 7],
    "/EmbeddedFiles": [5, 7],
    "/ImportData": [5, 7],
    "/JS": [5, 7],
    "/JavaScript": [5, 7],
    "/Launch": [5, 7],
    "/Names": [3, 5],
    "/OpenAction": [5, 7],
    "/RichMedia": [5, 7],
    "/SubmitForm": [5, 7],
    "/XFA": [5, 7],
    "Garbage Bytes before": [3, 6],     // increase after offsets error fix
    "Invalid stream /Length": [4, 7],
    "Invalid stream /Subtype": [4, 7],
    "Large streams": [5, 7],
    "Large strings": [5, 7],
    "Missing in xref": [5, 7],
    "Missing object terminator": [3, 6],
    "Missing stream terminator": [3, 6],
    "Not referenced from Catalog": [3, 6],
    "Obfuscated names": [4, 7],
    "Obfuscated strings": [3, 6],
    "getPageNthWord": [5, 7],
    "arguments.callee": [5, 7],
    "Xref Table missing": [5, 7],
    "containingJS": [5, 7],
    "Garbage bytes before terminator": [6, 8],

    // Int/Tuple return
    "pagesNumber": "3 if x==None or x<=2 else 2",
    "detectionRate": "0 if x==None else (float(x[0])/float(x[1]))*10"

}
